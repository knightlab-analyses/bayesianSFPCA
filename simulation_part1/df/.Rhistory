prop_var_avg[k]*100
around(colMeans(prop_var)*100, 2)
round(colMeans(prop_var)*100, 2)
paste(round(colMeans(prop_var)*100, 2), '%')
prop_var_avg = paste(round(colMeans(prop_var)*100, 2), '%', sep='')
prop_var_avg
save(N, K, Q, alpha_new, theta_mu_new, Theta_new, prop_var_avg, results_basis, prepared_data,
file="post_rotation_results.RData")
72.81 + 27.19
for (k in 1:K){
#pdf(paste(paste('FPCs_mean_PC', k, sep=''), 'pdf', sep='.'))
plot(time_cont, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),
lwd=2,col=1, xlab='time', ylab='response function', cex.lab=1.5)
lines(time_cont, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red
lines(time_cont, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green
title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))
legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)
}
for (k in 1:K){
#pdf(paste(paste('FPCs_mean_PC', k, sep=''), 'pdf', sep='.'))
plot(time_cont, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),
lwd=2,col=1, xlab='time', ylab='response function')
lines(time_cont, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red
lines(time_cont, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green
title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))
legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)
}
for (k in 1:K){
#pdf(paste(paste('FPCs_mean_PC', k, sep=''), 'pdf', sep='.'))
plot(time_cont, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),
lwd=2,col=1, xlab='time', ylab='response function')
lines(time_cont, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red
lines(time_cont, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green
title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))
legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)
}
for (k in 1:K){
pdf(paste(paste('FPCs_mean_PC', k, sep=''), 'pdf', sep='.'))
plot(time_cont, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),
lwd=2,col=1, xlab='time', ylab='response function')
lines(time_cont, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red
lines(time_cont, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green
title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))
legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)
dev.off()
}
for (k in 1:K){
pdf(paste(paste('FPCs_mean_PC', k, sep=''), 'pdf', sep='.'), width = 4, height = 4)
plot(time_cont, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),
lwd=2,col=1, xlab='time', ylab='response function')
lines(time_cont, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red
lines(time_cont, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green
title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))
legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n')
dev.off()
}
for (k in 1:K){
pdf(paste(paste('FPCs_mean_PC', k, sep=''), 'pdf', sep='.'), width = 4, height = 4)
plot(time_cont, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),
lwd=2,col=1, xlab='time', ylab='response function')
lines(time_cont, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red
lines(time_cont, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green
title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))
legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)
dev.off()
}
pdf('boxplot_PC1_scores.pdf', width = 4, height = 4)
compare_means(fpc1 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot1 = ggboxplot(df, x = "Version", y = "fpc1",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="none") # remove legend
dev.off()
library(ggpubr)
pdf('boxplot_PC1_scores.pdf', width = 4, height = 4)
compare_means(fpc1 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot1 = ggboxplot(df, x = "Version", y = "fpc1",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="none") # remove legend
dev.off()
pdf('boxplot_PC1_scores.pdf', width = 4, height = 4)
compare_means(fpc1 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot1 = ggboxplot(df, x = "Version", y = "fpc1",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="none") # remove legend
dev.off()
compare_means(fpc1 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot1 = ggboxplot(df, x = "Version", y = "fpc1",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="none") # remove legend
ggsave('boxplot_PC1_scores.pdf', width=4, height=4)
compare_means(fpc1 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot1 = ggboxplot(df, x = "Version", y = "fpc1",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text('PC1', face="bold", size=10)) +
theme(legend.position="none")
plot1
ggboxplot(df, x = "Version", y = "fpc1",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="none") + ylab('PC 1')
library(ggpubr)
compare_means(fpc1 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot1 = ggboxplot(df, x = "Version", y = "fpc1",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="none") + ylab('PC 1 scores') # remove legend
ggsave('boxplot_PC1_scores.pdf', width=3, height=3)
library(ggpubr)
compare_means(fpc1 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot1 = ggboxplot(df, x = "Version", y = "fpc1",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="none") + ylab('PC 1 scores') # remove legend
ggsave('boxplot_PC1_scores.pdf', width=3, height=3.5)
library(ggpubr)
compare_means(fpc1 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot1 = ggboxplot(df, x = "Version", y = "fpc1",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="none") + ylab('PC 1 scores') # remove legend
ggsave('boxplot_PC1_scores.pdf', width=3, height=3.1)
library(ggpubr)
compare_means(fpc1 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot1 = ggboxplot(df, x = "Version", y = "fpc1",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="none") + ylab('PC 1 scores') # remove legend
ggsave('boxplot_PC1_scores.pdf', width=3, height=3.2)
compare_means(fpc2 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot2 = ggboxplot(df, x = "Version", y = "fpc2",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") +
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="none") + ylab('PC 2 scores') # remove legend
ggsave('boxplot_PC2_scores.pdf', width=3, height=3.2)
plot(time_cont, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),
lwd=2,col=1, xlab='time', ylab='response function')
lines(time_cont, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red
lines(time_cont, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green
title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))
axis(1, font=2)
legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)
plot(time_cont, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),
lwd=2,col=1, xlab='time', ylab='response function')
lines(time_cont, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red
lines(time_cont, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green
title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))
axis(1, font.lab=2)
legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)
plot(time_cont, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),
lwd=2,col=1, xlab='time', ylab='response function', font.lab=2)
lines(time_cont, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red
lines(time_cont, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green
title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))
#axis(1, font=2) # make x-axis ticks label bold
legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)
for (k in 1:K){
pdf(paste(paste('FPCs_mean_PC', k, sep=''), 'pdf', sep='.'), width = 4, height = 4)
plot(time_cont, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),
lwd=2,col=1, xlab='time', ylab='response function', font.lab=2)
lines(time_cont, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red
lines(time_cont, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green
title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))
#axis(1, font=2) # make x-axis ticks label bold
legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)
dev.off()
}
plot(time_cont, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),
lwd=2,col=1, xlab='time', ylab='response function', font.lab=2, cex.lab=0.8)
lines(time_cont, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red
lines(time_cont, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green
title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))
#axis(1, font=2) # make x-axis ticks label bold
legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)
for (k in 1:K){
pdf(paste(paste('FPCs_mean_PC', k, sep=''), 'pdf', sep='.'), width = 4, height = 4)
plot(time_cont, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),
lwd=2,col=1, xlab='time', ylab='response function', font.lab=2, cex.lab=1.2)
lines(time_cont, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red
lines(time_cont, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green
title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))
#axis(1, font=2) # make x-axis ticks label bold
legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)
dev.off()
}
library(parallel)
library(rstan)
library(loo) # for waic()
library(Matrix) # for bdiag(): construct a block diagnoal matrix
options(mc.cores = parallel::detectCores())
df=read.csv("df_bound.txt",header=TRUE, sep='\t')
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
tmp.1 = df[df$patient %in% c('1', '1_1x', '1_2x', '1_4x'), ]
ggplot(tmp.1, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) +
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient1') + scale_color_manual(values=colpal)
tmp.2 = df[df$patient %in% c('2', '2_1x', '2_2x', '2_4x'), ]
ggplot(tmp.2, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) +
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient2') + scale_color_manual(values=colpal)
tmp.3 = df[df$patient %in% c('3', '3_1x', '3_2x', '3_4x'), ]
ggplot(tmp.3, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) +
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient3') + scale_color_manual(values=colpal)
tmp.4 = df[df$patient %in% c('4', '4_1x', '4_2x', '4_4x'), ]
ggplot(tmp.4, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) +
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient4') + scale_color_manual(values=colpal)
tmp.5 = df[df$patient %in% c('5', '5_1x', '5_2x', '5_4x'), ]
ggplot(tmp.5, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) +
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient5') + scale_color_manual(values=colpal)
tmp.6 = df[df$patient %in% c('6', '6_1x', '6_2x', '6_4x'), ]
ggplot(tmp.6, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) +
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient6') + scale_color_manual(values=colpal)
tmp.7 = df[df$patient %in% c('7', '7_1x', '7_2x', '7_4x'), ]
ggplot(tmp.7, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) +
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient7') + scale_color_manual(values=colpal)
tmp.8 = df[df$patient %in% c('8', '8_1x', '8_2x', '8_4x'), ]
ggplot(tmp.8, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) +
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient8') + scale_color_manual(values=colpal)
tmp.9 = df[df$patient %in% c('9', '9_1x', '9_2x', '9_4x'), ]
ggplot(tmp.9, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) +
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient9') + scale_color_manual(values=colpal)
tmp.10 = df[df$patient %in% c('10', '10_1x', '10_2x', '10_4x'), ]
ggplot(tmp.10, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) +
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient10') + scale_color_manual(values=colpal)
ggplot(tmp.8, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) +
xlab("time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient8') + scale_color_manual(values=colpal) +
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 121)
ggplot(tmp.10, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) +
xlab("time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient10') + scale_color_manual(values=colpal) +
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 121)
ggsave('Observed_patient10.pdf', width = 4, height = 3, dpi=600)
ggplot(tmp.8, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) +
xlab("time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient8') + scale_color_manual(values=colpal) +
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 121)
ggsave('Observed_patient8.pdf', width = 4, height = 3, dpi=600)
ggplot(tmp.1, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) +
xlab("time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient1') + scale_color_manual(values=colpal) +
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 121)
ggsave('Observed_patient1.pdf', width = 4, height = 3, dpi=600)
ggplot(tmp.4, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) +
xlab("time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient4') + scale_color_manual(values=colpal) +
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 121)
ggsave('Observed_patient4.pdf', width = 4, height = 3, dpi=600)
ggplot(tmp.10, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) +
xlab("time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient10') + scale_color_manual(values=colpal) +
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 121) +
theme(axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"))
ggplot(tmp.10, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) +
xlab("time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient10') + scale_color_manual(values=colpal) +
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 121) +
theme(axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"))
ggsave('Observed_patient10.pdf', width = 4, height = 3, dpi=600)
ggplot(tmp.8, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) +
xlab("time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient8') + scale_color_manual(values=colpal) +
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 121) +
theme(axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"))
ggsave('Observed_patient8.pdf', width = 4, height = 3, dpi=600)
ggplot(tmp.1, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) +
xlab("time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient1') + scale_color_manual(values=colpal) +
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 121) +
theme(axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"))
ggsave('Observed_patient1.pdf', width = 4, height = 3, dpi=600)
ggplot(tmp.4, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) +
xlab("time") + ylab("response") + aes(colour = factor(patient)) +
ggtitle('patient4') + scale_color_manual(values=colpal) +
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 121) +
theme(axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"))
ggsave('Observed_patient4.pdf', width = 4, height = 3, dpi=600)
prop_var_avg_origin = colMeans(prop_var)
prop_var_avg = paste(round(colMeans(prop_var)*100, 2), '%', sep='')
save(N, K, Q, alpha_new, theta_mu_new, Theta_new, prop_var_avg_origin, prop_var_avg, results_basis, prepared_data,
file="post_rotation_results.RData")
pdf('screeplot.pdf')
plot(prop_var_avg_origin, xlab='Principal Component Functions',
ylab='Proportion of Variance Explained', ylim=c(0,1),type="b", main='Scree Plot')
dev.off()
prop_var_avg
prop_var_avg_origin
library(ggpubr)
compare_means(fpc1 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot1 = ggboxplot(df, x = "Version", y = "fpc1",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="right") + ylab('PC 1 scores')
ggsave('boxplot_PC1_scores.pdf', width=4, height=3.2)
compare_means(fpc2 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot2 = ggboxplot(df, x = "Version", y = "fpc2",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") +
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="right") + ylab('PC 2 scores') # remove legend
ggsave('boxplot_PC2_scores.pdf', width=4, height=3.2)
load("post_rotation_results.RData")
vars_select = c('ID', 'patient', 'time', 'response', 'Version') # selected variables from prepared_data$data
ALPHA_array = alpha_new
MU_array = theta_mu_new
THETA_array = Theta_new
phi_t_cont = results_basis$orth_spline_basis_cont
phi_t = results_basis$orth_spline_basis_sparse
time_cont = results_basis$time_cont
nloop=dim(ALPHA_array)[3]
first=1
last=nloop
# N = prepared_data$num_subjects
MU_mean = MU_array[, first] #mean function across sampling sessions
ALPHA_mean = ALPHA_array[,,first] # mean factor scores
THETA_mean = THETA_array[,,first] # mean factor loading
for(iter in 2:nloop){
MU_mean = MU_mean + MU_array[, iter]
ALPHA_mean = ALPHA_mean + ALPHA_array[,,iter]
THETA_mean = THETA_mean + THETA_array[,,iter]
}
MU_mean=cbind(MU_mean/(last-first+1))
ALPHA_mean=cbind(ALPHA_mean/(last-first+1))
THETA_mean=cbind(THETA_mean/(last-first+1))
Mu_functions = t(bdiag(cbind(phi_t_cont)))%*%MU_mean
FPC_mean=t(phi_t_cont)%*%THETA_mean
### create data frame containing needed information ####
df = prepared_data$data[, vars_select]
Y_sparse = list()
time_sparse = list()
scores = data.frame(t(ALPHA_mean))
names(scores)=c("fpc1","fpc2")
df$fpc1=0 # principle component scores
df$fpc2=0
i = 0
for (pid in unique(df$ID)){
i = i + 1
Y_sparse[[i]] = df$response[df$ID == pid]
time_sparse[[i]] = df$time[df$ID == pid]
df$fpc1[df$ID == pid] = scores[i, 1]
df$fpc2[df$ID == pid] = scores[i, 2]
}
Fits_sparse=list()
for(i in 1:N){
Fits_sparse[[i]] = t(phi_t[[i]]) %*% MU_mean + t(phi_t[[i]]) %*% THETA_mean %*% ALPHA_mean[, i]
}
df$Y_sparse = unlist(Y_sparse) # check: sum(df$Y_sparse != df$response) == 0
df$Fits_sparse = unlist(Fits_sparse)
df$residuals = df$Y_sparse - df$Fits_sparse
df$residuals = df$Y_sparse - df$Fits_sparse
library(ggpubr)
compare_means(fpc1 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot1 = ggboxplot(df, x = "Version", y = "fpc1",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="right") + ylab('PC 1 scores')
ggsave('boxplot_PC1_scores.pdf', width=4, height=3.2)
compare_means(fpc2 ~ Version,  data = df, method = "t.test")
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),
c("baseline", "shift_4x"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
plot2 = ggboxplot(df, x = "Version", y = "fpc2",
color = "Version", palette = colpal)+
stat_compare_means(comparisons = my_comparisons, method = "t.test") +
theme(text = element_text(size=12),
axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10)) +
theme(legend.position="right") + ylab('PC 2 scores') # remove legend
ggsave('boxplot_PC2_scores.pdf', width=4, height=3.2)
data = read.csv("df_bound.txt",header=TRUE, sep='\t')
sigma_y = sd(data$response)
mu_y = mean(data$response)
for (k in 1:K){
pdf(paste(paste('FPCs_mean_PC', k, sep=''), 'pdf', sep='.'), width = 4, height = 4)
plot(time_cont*22, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),
lwd=2,col=1, xlab='time', ylab='response function', font.lab=2, cex.lab=1.2)
lines(time_cont*22, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red
lines(time_cont*22, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green
title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))
#axis(1, font=2) # make x-axis ticks label bold
legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)
dev.off()
}
3.63-06/0.3
3.6e-06/0.3
2.22e-16/0.005
