load("post_rotation_results.RData")#
vars_select = c('ID', 'patient', 'time', 'response', 'Version') # selected variables from prepared_data$data#
#
ALPHA_array = alpha_new#
MU_array = theta_mu_new#
THETA_array = Theta_new#
phi_t_cont = results_basis$orth_spline_basis_cont#
phi_t = results_basis$orth_spline_basis_sparse#
time_cont = results_basis$time_cont#
#
nloop=dim(ALPHA_array)[3]#
first=1#
last=nloop#
# N = prepared_data$num_subjects#
#
MU_mean = MU_array[, first] #mean function across sampling sessions#
ALPHA_mean = ALPHA_array[,,first] # mean factor scores#
THETA_mean = THETA_array[,,first] # mean factor loading#
#
for(iter in 2:nloop){#
	MU_mean = MU_mean + MU_array[, iter]#
	ALPHA_mean = ALPHA_mean + ALPHA_array[,,iter]#
	THETA_mean = THETA_mean + THETA_array[,,iter]#
}#
#
MU_mean=cbind(MU_mean/(last-first+1))#
ALPHA_mean=cbind(ALPHA_mean/(last-first+1))#
THETA_mean=cbind(THETA_mean/(last-first+1))#
#
Mu_functions = t(bdiag(cbind(phi_t_cont)))%*%MU_mean#
FPC_mean=t(phi_t_cont)%*%THETA_mean#
### create data frame containing needed information #####
df = prepared_data$data[, vars_select]#
Y_sparse = list()#
time_sparse = list()#
scores = data.frame(t(ALPHA_mean)) #
names(scores)=c("fpc1","fpc2")#
df$fpc1=0 # principle component scores#
df$fpc2=0#
#
i = 0#
for (pid in unique(df$ID)){#
	i = i + 1#
	Y_sparse[[i]] = df$response[df$ID == pid]#
	time_sparse[[i]] = df$time[df$ID == pid]#
	df$fpc1[df$ID == pid] = scores[i, 1]#
	df$fpc2[df$ID == pid] = scores[i, 2]#
}#
#
Fits_sparse=list()#
for(i in 1:N){#
	Fits_sparse[[i]] = t(phi_t[[i]]) %*% MU_mean + t(phi_t[[i]]) %*% THETA_mean %*% ALPHA_mean[, i]#
}#
#
df$Y_sparse = unlist(Y_sparse) # check: sum(df$Y_sparse != df$response) == 0#
df$Fits_sparse = unlist(Fits_sparse)#
df$residuals = df$Y_sparse - df$Fits_sparse#
df$residuals = df$Y_sparse - df$Fits_sparse
library(parallel)#
library(rstan)#
library(loo) # for waic()#
library(Matrix) # for bdiag(): construct a block diagnoal matrix#
options(mc.cores = parallel::detectCores())
load("post_rotation_results.RData")#
vars_select = c('ID', 'patient', 'time', 'response', 'Version') # selected variables from prepared_data$data#
#
ALPHA_array = alpha_new#
MU_array = theta_mu_new#
THETA_array = Theta_new#
phi_t_cont = results_basis$orth_spline_basis_cont#
phi_t = results_basis$orth_spline_basis_sparse#
time_cont = results_basis$time_cont#
#
nloop=dim(ALPHA_array)[3]#
first=1#
last=nloop#
# N = prepared_data$num_subjects#
#
MU_mean = MU_array[, first] #mean function across sampling sessions#
ALPHA_mean = ALPHA_array[,,first] # mean factor scores#
THETA_mean = THETA_array[,,first] # mean factor loading#
#
for(iter in 2:nloop){#
	MU_mean = MU_mean + MU_array[, iter]#
	ALPHA_mean = ALPHA_mean + ALPHA_array[,,iter]#
	THETA_mean = THETA_mean + THETA_array[,,iter]#
}#
#
MU_mean=cbind(MU_mean/(last-first+1))#
ALPHA_mean=cbind(ALPHA_mean/(last-first+1))#
THETA_mean=cbind(THETA_mean/(last-first+1))#
#
Mu_functions = t(bdiag(cbind(phi_t_cont)))%*%MU_mean#
FPC_mean=t(phi_t_cont)%*%THETA_mean#
### create data frame containing needed information #####
df = prepared_data$data[, vars_select]#
Y_sparse = list()#
time_sparse = list()#
scores = data.frame(t(ALPHA_mean)) #
names(scores)=c("fpc1","fpc2")#
df$fpc1=0 # principle component scores#
df$fpc2=0#
#
i = 0#
for (pid in unique(df$ID)){#
	i = i + 1#
	Y_sparse[[i]] = df$response[df$ID == pid]#
	time_sparse[[i]] = df$time[df$ID == pid]#
	df$fpc1[df$ID == pid] = scores[i, 1]#
	df$fpc2[df$ID == pid] = scores[i, 2]#
}#
#
Fits_sparse=list()#
for(i in 1:N){#
	Fits_sparse[[i]] = t(phi_t[[i]]) %*% MU_mean + t(phi_t[[i]]) %*% THETA_mean %*% ALPHA_mean[, i]#
}#
#
df$Y_sparse = unlist(Y_sparse) # check: sum(df$Y_sparse != df$response) == 0#
df$Fits_sparse = unlist(Fits_sparse)#
df$residuals = df$Y_sparse - df$Fits_sparse#
df$residuals = df$Y_sparse - df$Fits_sparse
compare_means(fpc1 ~ Version,  data = df, method = "t.test")
library(ggpubr)#
library(gridExtra)
compare_means(fpc1 ~ Version,  data = df, method = "t.test")
compare_means(fpc2 ~ Version,  data = df, method = "t.test")
library(ggpubr)#
library(gridExtra)#
pdf('fpcScores_ggBoxplot.pdf', width=10, height=8)#
### p-values based on Wilcoxon test#
compare_means(fpc1 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot1 = ggboxplot(df, x = "Version", y = "fpc1",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons) +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))  # Add pairwise comparisons p-value#
#
compare_means(fpc2 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot2 = ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons) +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))#
grid.arrange(plot1, plot2, ncol=2)#
dev.off()
getwd()
compare_means(fpc1 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot1 = ggboxplot(df, x = "Version", y = "fpc1",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons) +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))  # Add pairwise comparisons p-value#
#
compare_means(fpc2 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot2 = ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons) +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))#
grid.arrange(plot1, plot2, ncol=2)
compare_means(fpc1 ~ Version,  data = df)#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot1 = ggboxplot(df, x = "Version", y = "fpc1",#
          color = "Version", palette = colpal, , add = "jitter")+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))
plot1
library(ggpubr)#
library(gridExtra)#
pdf('fpcScores_ggBoxplot.pdf', width=10, height=8)#
### p-values based on Wilcoxon test#
compare_means(fpc1 ~ Version,  data = df, method = "t.test"#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot1 = ggboxplot(df, x = "Version", y = "fpc1",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))  # Add pairwise comparisons p-value#
#
compare_means(fpc2 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot2 = ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))#
grid.arrange(plot1, plot2, ncol=2)#
dev.off()
ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test", label = "p.signif") +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))
ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test", aes(label = paste0(..method.., “\n”, “p =”, ..p.format..))) +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))
ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test", #
	aes(label = paste(..method.., “\n”, “p =”, ..p.format..))) +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))
ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test", #
	aes(label = paste(“p =”, ..p.format..))) +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))
ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test", #
	aes(label = paste0(“p =”, ..p.format..))) +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))
ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test", #
	aes(label = ..p.format..)) +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))
ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test", #
	aes(label = ..p.format..p.sigp.signif..)) +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))
library(ggpubr)#
library(gridExtra)#
pdf('fpcScores_ggBoxplot.pdf', width=10, height=8)#
### p-values based on Wilcoxon test#
compare_means(fpc1 ~ Version,  data = df, method = "t.test"#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot1 = ggboxplot(df, x = "Version", y = "fpc1",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))  # Add pairwise comparisons p-value#
#
compare_means(fpc2 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot2 = ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"))#
grid.arrange(plot1, plot2, ncol=2)#
dev.off()
getwd()
library(splinectomeR) #
require(ggplot2)#
require(reshape2)#
#
df=read.csv("dfm_bound.txt.txt",header=TRUE, sep='\t')
df=read.csv("dfm_bound.txt",header=TRUE, sep='\t')
head(df)
result1 = permuspliner(data=df, xvar='time', yvar='response', cases='patient',#
                    category='Version', groups = c('baseline','shift_1x'), perms = 999, retain_perm = T)#
result2 = permuspliner(data=df, xvar='time', yvar='response', cases='patient',#
                    category='Version', groups = c('baseline','shift_2x'), perms = 999, retain_perm = T)#
result4 = permuspliner(data=df, xvar='time', yvar='response', cases='patient',#
                    category='Version', groups = c('baseline','shift_4x'), perms = 999, retain_perm = T)#
#
est_bs = result4['v1_interpolated'][[1]] # baseline (x = time, var1 = estimated baseline values)#
est_bs$group = as.character(result4['category_1'][[1]])#
est_s4 = result4['v2_interpolated'][[1]] # shift_x (x = time, var2 = estimated shift_x values)#
est_s4$group = as.character(result4['category_2'][[1]])#
est_s1 = result1['v2_interpolated'][[1]] #
est_s1$group = as.character(result1['category_2'][[1]])#
est_s2 = result2['v2_interpolated'][[1]] #
est_s2$group = as.character(result2['category_2'][[1]])#
colnames(est_bs)[1] = colnames(est_s4)[1] = colnames(est_s1)[1] = colnames(est_s2)[1] = 'time'#
colnames(est_bs)[2] = colnames(est_s4)[2] = colnames(est_s1)[2] = colnames(est_s2)[2]= 'response' #
est_data = rbind(est_bs, est_s1, est_s2, est_s4)#
#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
ggplot() + geom_line(data=est_data, aes(x=time, y=response, color=factor(est_data$group)), size=1.2) +#
scale_color_manual(values=colpal) + labs(colour= "Version") +#
geom_point(data=df, aes(x=time, y=response, color=Version))
ggsave('splinectome_dfm_curves.pdf')
ggplot() + geom_line(data=est_data, aes(x=time, y=response, color=factor(est_data$group)), size=1.2) +#
scale_color_manual(values=colpal) + labs(colour= "Version") + #
theme_classic() + theme(axis.text = element_text(color='black')) +#
geom_point(data=df, aes(x=time, y=response, color=Version), alpha=0.5, size=1.2)
ggplot() + geom_line(data=est_data, aes(x=time, y=response, color=factor(est_data$group)), size=1.2) +#
scale_color_manual(values=colpal) + labs(colour= "Version") + #
theme_classic() + theme(axis.text = element_text(color='black')) +#
geom_point(data=df, aes(x=time, y=response, color=Version), alpha=0.5, size=1.2)#
ggsave('splinectome_dfm_curves.pdf')
ggsave('splinectome_dfm_curves.pdf', width = 4, height = 3, dpi=600)
ggplot() + geom_line(data=est_data, aes(x=time, y=response, color=factor(est_data$group)), size=1.2) +#
scale_color_manual(values=colpal) + labs(colour= "Version") + #
theme_classic() + theme(axis.text = element_text(color='black')) + ggtitle('Estimated Mean Curves (splinectomeR')#
geom_point(data=df, aes(x=time, y=response, color=Version), alpha=0.5, size=1.2)#
ggsave('splinectome_dfm_curves.pdf', width = 4, height = 3, dpi=600)
ggplot() + geom_line(data=est_data, aes(x=time, y=response, color=factor(est_data$group)), size=1.2) +#
scale_color_manual(values=colpal) + labs(colour= "Version") + #
theme_classic() + theme(axis.text = element_text(color='black')) + ggtitle('Estimated Mean Curves (splinectomeR') +#
geom_point(data=df, aes(x=time, y=response, color=Version), alpha=0.5, size=1.2)
library(splinectomeR) #
require(ggplot2)#
require(reshape2)#
#
df=read.csv("dfm_bound.txt.txt",header=TRUE, sep='\t')#
result1 = permuspliner(data=df, xvar='time', yvar='response', cases='patient',#
                    category='Version', groups = c('baseline','shift_1x'), perms = 999, retain_perm = T)#
result2 = permuspliner(data=df, xvar='time', yvar='response', cases='patient',#
                    category='Version', groups = c('baseline','shift_2x'), perms = 999, retain_perm = T)#
result4 = permuspliner(data=df, xvar='time', yvar='response', cases='patient',#
                    category='Version', groups = c('baseline','shift_4x'), perms = 999, retain_perm = T)#
#
est_bs = result4['v1_interpolated'][[1]] # baseline (x = time, var1 = estimated baseline values)#
est_bs$group = as.character(result4['category_1'][[1]])#
est_s4 = result4['v2_interpolated'][[1]] # shift_x (x = time, var2 = estimated shift_x values)#
est_s4$group = as.character(result4['category_2'][[1]])#
est_s1 = result1['v2_interpolated'][[1]] #
est_s1$group = as.character(result1['category_2'][[1]])#
est_s2 = result2['v2_interpolated'][[1]] #
est_s2$group = as.character(result2['category_2'][[1]])#
colnames(est_bs)[1] = colnames(est_s4)[1] = colnames(est_s1)[1] = colnames(est_s2)[1] = 'time'#
colnames(est_bs)[2] = colnames(est_s4)[2] = colnames(est_s1)[2] = colnames(est_s2)[2]= 'response' #
est_data = rbind(est_bs, est_s1, est_s2, est_s4)#
#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
ggplot() + geom_line(data=est_data, aes(x=time, y=response, color=factor(est_data$group)), size=1.2) +#
scale_color_manual(values=colpal) + labs(colour= "Version") + #
theme_classic() + theme(axis.text = element_text(color='black')) + #
geom_point(data=df, aes(x=time, y=response, color=Version), alpha=0.5, size=1.2)#
ggsave('splinectome_dfm_curves.pdf', width = 4, height = 3, dpi=600)
library(splinectomeR) #
require(ggplot2)#
require(reshape2)#
#
df=read.csv("dfm_bound.txt.txt",header=TRUE, sep='\t')
library(splinectomeR) #
require(ggplot2)#
require(reshape2)#
#
df=read.csv("dfm_bound.txt",header=TRUE, sep='\t')#
result1 = permuspliner(data=df, xvar='time', yvar='response', cases='patient',#
                    category='Version', groups = c('baseline','shift_1x'), perms = 999, retain_perm = T)#
result2 = permuspliner(data=df, xvar='time', yvar='response', cases='patient',#
                    category='Version', groups = c('baseline','shift_2x'), perms = 999, retain_perm = T)#
result4 = permuspliner(data=df, xvar='time', yvar='response', cases='patient',#
                    category='Version', groups = c('baseline','shift_4x'), perms = 999, retain_perm = T)#
#
est_bs = result4['v1_interpolated'][[1]] # baseline (x = time, var1 = estimated baseline values)#
est_bs$group = as.character(result4['category_1'][[1]])#
est_s4 = result4['v2_interpolated'][[1]] # shift_x (x = time, var2 = estimated shift_x values)#
est_s4$group = as.character(result4['category_2'][[1]])#
est_s1 = result1['v2_interpolated'][[1]] #
est_s1$group = as.character(result1['category_2'][[1]])#
est_s2 = result2['v2_interpolated'][[1]] #
est_s2$group = as.character(result2['category_2'][[1]])#
colnames(est_bs)[1] = colnames(est_s4)[1] = colnames(est_s1)[1] = colnames(est_s2)[1] = 'time'#
colnames(est_bs)[2] = colnames(est_s4)[2] = colnames(est_s1)[2] = colnames(est_s2)[2]= 'response' #
est_data = rbind(est_bs, est_s1, est_s2, est_s4)#
#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
ggplot() + geom_line(data=est_data, aes(x=time, y=response, color=factor(est_data$group)), size=1.2) +#
scale_color_manual(values=colpal) + labs(colour= "Version") + #
theme_classic() + theme(axis.text = element_text(color='black')) + #
geom_point(data=df, aes(x=time, y=response, color=Version), alpha=0.5, size=1.2)#
ggsave('splinectome_dfm_curves.pdf', width = 4, height = 3, dpi=600)
library(parallel)#
library(rstan)#
library(loo) # for waic()#
library(Matrix) # for bdiag(): construct a block diagnoal matrix#
options(mc.cores = parallel::detectCores())#
df=read.csv("dfm_bound.txt",header=TRUE, sep='\t')
colpal = c('yellow', 'blue', 'green', 'purple')#
ggplot(df, aes(x=time, y=response, group=patient, colour=Version), palette=colpal) + #
geom_line(alpha=0.3) + xlab("Observed Time") + ylab("response")  +#
theme_classic() + theme(axis.text = element_text(color='black')) +#
geom_smooth(se=FALSE, size=1.5, aes(group=Version))#
ggsave('Observed_spaghetti_group.pdf', width = 4, height = 3, dpi=600)
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
ggplot(df, aes(x=time, y=response, group=patient, colour=Version), palette=colpal) + #
geom_line(alpha=0.3) + xlab("Observed Time") + ylab("response")  +#
theme_classic() + theme(axis.text = element_text(color='black')) +#
geom_smooth(se=FALSE, size=1.5, aes(group=Version))#
ggsave('Observed_spaghetti_group.pdf', width = 4, height = 3, dpi=600)
library(parallel)#
library(rstan)#
library(loo) # for waic()#
library(Matrix) # for bdiag(): construct a block diagnoal matrix#
options(mc.cores = parallel::detectCores())#
df=read.csv("dfm_bound.txt",header=TRUE, sep='\t')
library(ggplot2)#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
ggplot(df, aes(x=time, y=response, group=patient, colour=Version), palette=colpal) + #
geom_line(alpha=0.3) + xlab("Observed Time") + ylab("response")  +#
theme_classic() + theme(axis.text = element_text(color='black')) +#
geom_smooth(se=FALSE, size=1.5, aes(group=Version))#
ggsave('Observed_spaghetti_group.pdf', width = 4, height = 3, dpi=600)
load("post_rotation_results.RData")#
vars_select = c('ID', 'patient', 'time', 'response', 'Version') # selected variables from prepared_data$data#
#
ALPHA_array = alpha_new#
MU_array = theta_mu_new#
THETA_array = Theta_new#
phi_t_cont = results_basis$orth_spline_basis_cont#
phi_t = results_basis$orth_spline_basis_sparse#
time_cont = results_basis$time_cont#
#
nloop=dim(ALPHA_array)[3]#
first=1#
last=nloop#
# N = prepared_data$num_subjects#
#
MU_mean = MU_array[, first] #mean function across sampling sessions#
ALPHA_mean = ALPHA_array[,,first] # mean factor scores#
THETA_mean = THETA_array[,,first] # mean factor loading#
#
for(iter in 2:nloop){#
	MU_mean = MU_mean + MU_array[, iter]#
	ALPHA_mean = ALPHA_mean + ALPHA_array[,,iter]#
	THETA_mean = THETA_mean + THETA_array[,,iter]#
}#
#
MU_mean=cbind(MU_mean/(last-first+1))#
ALPHA_mean=cbind(ALPHA_mean/(last-first+1))#
THETA_mean=cbind(THETA_mean/(last-first+1))#
#
Mu_functions = t(bdiag(cbind(phi_t_cont)))%*%MU_mean#
FPC_mean=t(phi_t_cont)%*%THETA_mean#
### create data frame containing needed information #####
df = prepared_data$data[, vars_select]#
Y_sparse = list()#
time_sparse = list()#
scores = data.frame(t(ALPHA_mean)) #
names(scores)=c("fpc1","fpc2")#
df$fpc1=0 # principle component scores#
df$fpc2=0#
#
i = 0#
for (pid in unique(df$ID)){#
	i = i + 1#
	Y_sparse[[i]] = df$response[df$ID == pid]#
	time_sparse[[i]] = df$time[df$ID == pid]#
	df$fpc1[df$ID == pid] = scores[i, 1]#
	df$fpc2[df$ID == pid] = scores[i, 2]#
}#
#
Fits_sparse=list()#
for(i in 1:N){#
	Fits_sparse[[i]] = t(phi_t[[i]]) %*% MU_mean + t(phi_t[[i]]) %*% THETA_mean %*% ALPHA_mean[, i]#
}#
#
df$Y_sparse = unlist(Y_sparse) # check: sum(df$Y_sparse != df$response) == 0#
df$Fits_sparse = unlist(Fits_sparse)#
df$residuals = df$Y_sparse - df$Fits_sparse#
df$residuals = df$Y_sparse - df$Fits_sparse
data = read.csv("df_bound.txt",header=TRUE, sep='\t')#
sigma_y = sd(data$response)#
mu_y = mean(data$response)
getwd()
data = read.csv("dfm_bound.txt",header=TRUE, sep='\t')#
sigma_y = sd(data$response)#
mu_y = mean(data$response)#
#
pdf('FPCs_transformed.pdf', width = 4, height = 4)#
plot(time_cont*22, FPC_mean[, 1]*sigma_y + mu_y, type="l", lwd=2, ylim=c(84, 131),#
     xlab='time', ylab='PC Curve Values', col='red')#
lines(time_cont*22, FPC_mean[, 2]*sigma_y + mu_y,type="l",lwd=2, col='blue')#
#title(main=paste("FPCs for", "response"))#
legend('topright', c('PC1', 'PC2'), lwd=c(2, 2), col=c('red', 'blue'), bty='n')#
dev.off()
library(ggpubr)#
library(gridExtra)#
pdf('fpcScores_ggBoxplot.pdf', width = 7, height = 3)#
### p-values based on T test (same as from simple linear regression)#
compare_means(fpc1 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot1 = ggboxplot(df, x = "Version", y = "fpc1",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"),#
      axis.text.x = element_text(face="bold", size=10),#
	  axis.text.y = element_text(face="bold", size=10)) +#
theme(legend.position="none") # remove legend#
#
compare_means(fpc2 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot2 = ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"),#
      axis.text.x = element_text(face="bold", size=10),#
	  axis.text.y = element_text(face="bold", size=10)) +#
theme(legend.position="none") # remove legend#
grid.arrange(plot1, plot2, ncol=2)#
dev.off()
library(ggpubr)#
library(gridExtra)#
pdf('fpcScores_ggBoxplot.pdf', width = 7, height = 3.5)#
### p-values based on T test (same as from simple linear regression)#
compare_means(fpc1 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot1 = ggboxplot(df, x = "Version", y = "fpc1",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"),#
      axis.text.x = element_text(face="bold", size=10),#
	  axis.text.y = element_text(face="bold", size=10)) +#
theme(legend.position="none") # remove legend#
#
compare_means(fpc2 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot2 = ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"),#
      axis.text.x = element_text(face="bold", size=10),#
	  axis.text.y = element_text(face="bold", size=10)) +#
theme(legend.position="none") # remove legend#
grid.arrange(plot1, plot2, ncol=2)#
dev.off()
pdf('fpcScores_ggBoxplot.pdf', width = 7, height = 3.8)#
### p-values based on T test (same as from simple linear regression)#
compare_means(fpc1 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot1 = ggboxplot(df, x = "Version", y = "fpc1",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"),#
      axis.text.x = element_text(face="bold", size=10),#
	  axis.text.y = element_text(face="bold", size=10)) +#
theme(legend.position="none") # remove legend#
#
compare_means(fpc2 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot2 = ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"),#
      axis.text.x = element_text(face="bold", size=10),#
	  axis.text.y = element_text(face="bold", size=10)) +#
theme(legend.position="none") # remove legend#
grid.arrange(plot1, plot2, ncol=2)#
dev.off()
getwd()
library(parallel)#
library(rstan)#
library(loo) # for waic()#
library(Matrix) # for bdiag(): construct a block diagnoal matrix#
options(mc.cores = parallel::detectCores())#
df=read.csv("dfm_bound.txt",header=TRUE, sep='\t')
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
tmp.1 = df[df$patient %in% c('1', '1_1x', '1_2x', '1_4x'), ]#
ggplot(tmp.1, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient1') + scale_color_manual(values=colpal)#
#
tmp.2 = df[df$patient %in% c('2', '2_1x', '2_2x', '2_4x'), ]#
ggplot(tmp.2, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient2') + scale_color_manual(values=colpal)#
#
tmp.3 = df[df$patient %in% c('3', '3_1x', '3_2x', '3_4x'), ]#
ggplot(tmp.3, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient3') + scale_color_manual(values=colpal)#
#
tmp.4 = df[df$patient %in% c('4', '4_1x', '4_2x', '4_4x'), ]#
ggplot(tmp.4, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +#
ggtitle('patient4') + scale_color_manual(values=colpal)#
#
tmp.5 = df[df$patient %in% c('5', '5_1x', '5_2x', '5_4x'), ]#
ggplot(tmp.5, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient5') + scale_color_manual(values=colpal)#
#
tmp.6 = df[df$patient %in% c('6', '6_1x', '6_2x', '6_4x'), ]#
ggplot(tmp.6, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient6') + scale_color_manual(values=colpal)#
#
tmp.7 = df[df$patient %in% c('7', '7_1x', '7_2x', '7_4x'), ]#
ggplot(tmp.7, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient7') + scale_color_manual(values=colpal)#
#
tmp.8 = df[df$patient %in% c('8', '8_1x', '8_2x', '8_4x'), ]#
ggplot(tmp.8, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient8') + scale_color_manual(values=colpal)#
#
tmp.9 = df[df$patient %in% c('9', '9_1x', '9_2x', '9_4x'), ]#
ggplot(tmp.9, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient9') + scale_color_manual(values=colpal)#
#
tmp.10 = df[df$patient %in% c('10', '10_1x', '10_2x', '10_4x'), ]#
ggplot(tmp.10, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient10') + scale_color_manual(values=colpal)
ggplot(tmp.1, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient1') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold"))#
ggsave('Observed_patient1.pdf', width = 4, height = 3, dpi=600)#
#
ggplot(tmp.1, aes(x=time, y=response)) + geom_point() + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient1') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold"))#
ggsave('Observed_patient1_point.pdf', width = 4, height = 3, dpi=600)#
#
ggplot(tmp.2, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient2') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold"))#
ggsave('Observed_patient2.pdf', width = 4, height = 3, dpi=600)#
#
ggplot(tmp.2, aes(x=time, y=response)) + geom_point() + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient2') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold"))#
ggsave('Observed_patient2_point.pdf', width = 4, height = 3, dpi=600)#
#
ggplot(tmp.3, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient3') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold"))#
ggsave('Observed_patient3.pdf', width = 4, height = 3, dpi=600)#
#
ggplot(tmp.3, aes(x=time, y=response)) + geom_point() + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient3') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold"))#
ggsave('Observed_patient3_point.pdf', width = 4, height = 3, dpi=600)#
#
ggplot(tmp.5, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient5') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold"))#
ggsave('Observed_patient5.pdf', width = 4, height = 3, dpi=600)#
#
ggplot(tmp.5, aes(x=time, y=response)) + geom_point() + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient5') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold"))#
ggsave('Observed_patient5_point.pdf', width = 4, height = 3, dpi=600)
source('../../sfpca.R')#
prepared_data = prepare_data(data=df, unique_subject_id = 'patient', time_var='time', #
	                         response='response', standardize.y=TRUE, scale.time=TRUE)#
save(prepared_data, file='prepared_data_dfm.RData')
load('prepared_data_dfm.RData')#
Nsamples = 1000#
Nchains = 3#
#
i = 3; k = npcs =2; d = nknots =1; #
sa = sa.list[[i]]#
source('../../sfpca.R')#
results_basis = basis_setup_sparse(prepared_data=prepared_data, nknots=d, orth=TRUE)#
#
Sigma = extract(sa,"Sigma",permuted=FALSE)#
W = extract(sa,"W",permuted=FALSE)#
sigma_eps = extract(sa,"sigma_eps",permuted=FALSE)#
theta_mu = extract(sa,"theta_mu",permuted=FALSE)#
alpha = extract(sa,"alpha",permuted=FALSE)#
Theta = extract(sa,"Theta",permuted=FALSE)#
## Reshape parameters and reorient loadings with PCA rotation #
N = prepared_data$num_subjects#
K = npcs#
Q = nknots + 4#
#
theta_mu_new = array(0, dim=c(Q, Nchains*Nsamples/2))#
alpha_old = alpha_new = array(0, dim=c(K, N, Nchains*Nsamples/2)) #
Theta_old = Theta_new = array(0, dim=c(Q, K, Nchains*Nsamples/2))#
W_old = array(0, dim=c(Q, Q, Nchains*Nsamples/2)) #
#
ind = 0#
prop_var = NULL#
for(i in 1:dim(W)[1]){#
	for(j in 1:dim(W)[2]){#
		ind = ind + 1#
		theta_mu_new[,ind] = array(theta_mu[i,j,])#
		alpha_old[,,ind] = t(array(alpha[i,j,],dim=c(N, K)))#
		Theta_old[,,ind] = array(Theta[i,j,],dim=c(Q, K))#
		W_old[,,ind] = array(W[i,j,],dim=c(Q,Q)) #
#
		eigen_temp_sigma=eigen(W_old[,,ind])#
		v_temp=eigen_temp_sigma$vectors#
		d_temp=eigen_temp_sigma$values #
		prop_var = rbind(prop_var, d_temp/sum(d_temp)) # proportion of variance explained by each PC#
#
		for(com in 1:length(d_temp)){#
			if(!(d_temp[com]-Re(d_temp[com])==0)){#
				d_temp[com]=-1*10^5#
			}#
		}#
		pos_temp=array(0,dim=c(K,1))#
		for(pos in 1:K){#
			pos_temp[pos]=(1:length(d_temp))[max(d_temp)==d_temp]#
			d_temp[pos_temp[pos]]=-1e+5#
		}#
#
		Theta_new[,,ind]=v_temp[,pos_temp]#
		for(k in 1:K){#
			Theta_new[, k, ind]=sign(Theta_new[1,k,ind]) * Theta_new[,k,ind]#
		}#
#
		alpha_new[,, ind] = t(Theta_new[,,ind]) %*% Theta_old[,,ind] %*% alpha_old[,,ind]#
	}#
}#
#
# proportion of variance explained by each PC (average over all draws)#
prop_var_avg = paste(round(colMeans(prop_var)*100, 2), '%', sep='')#
#
save(N, K, Q, alpha_new, theta_mu_new, Theta_new, prop_var_avg, results_basis, prepared_data, #
	 file="post_rotation_results.RData")#
#
pdf('screeplot.pdf')#
plot(prop_var_avg, xlab='Principal Component Functions', #
	ylab='Proportion of Variance Explained', ylim=c(0,1),type="b", main='Scree Plot')#
dev.off()
load('prepared_data_dfm.RData')#
Nsamples = 1000#
Nchains = 3#
#
load('stan_results.RData')#
i = 3; k = npcs =2; d = nknots =1; #
sa = sa.list[[i]]#
source('../../sfpca.R')#
results_basis = basis_setup_sparse(prepared_data=prepared_data, nknots=d, orth=TRUE)#
#
Sigma = extract(sa,"Sigma",permuted=FALSE)#
W = extract(sa,"W",permuted=FALSE)#
sigma_eps = extract(sa,"sigma_eps",permuted=FALSE)#
theta_mu = extract(sa,"theta_mu",permuted=FALSE)#
alpha = extract(sa,"alpha",permuted=FALSE)#
Theta = extract(sa,"Theta",permuted=FALSE)#
## Reshape parameters and reorient loadings with PCA rotation #
N = prepared_data$num_subjects#
K = npcs#
Q = nknots + 4#
#
theta_mu_new = array(0, dim=c(Q, Nchains*Nsamples/2))#
alpha_old = alpha_new = array(0, dim=c(K, N, Nchains*Nsamples/2)) #
Theta_old = Theta_new = array(0, dim=c(Q, K, Nchains*Nsamples/2))#
W_old = array(0, dim=c(Q, Q, Nchains*Nsamples/2)) #
#
ind = 0#
prop_var = NULL#
for(i in 1:dim(W)[1]){#
	for(j in 1:dim(W)[2]){#
		ind = ind + 1#
		theta_mu_new[,ind] = array(theta_mu[i,j,])#
		alpha_old[,,ind] = t(array(alpha[i,j,],dim=c(N, K)))#
		Theta_old[,,ind] = array(Theta[i,j,],dim=c(Q, K))#
		W_old[,,ind] = array(W[i,j,],dim=c(Q,Q)) #
#
		eigen_temp_sigma=eigen(W_old[,,ind])#
		v_temp=eigen_temp_sigma$vectors#
		d_temp=eigen_temp_sigma$values #
		prop_var = rbind(prop_var, d_temp/sum(d_temp)) # proportion of variance explained by each PC#
#
		for(com in 1:length(d_temp)){#
			if(!(d_temp[com]-Re(d_temp[com])==0)){#
				d_temp[com]=-1*10^5#
			}#
		}#
		pos_temp=array(0,dim=c(K,1))#
		for(pos in 1:K){#
			pos_temp[pos]=(1:length(d_temp))[max(d_temp)==d_temp]#
			d_temp[pos_temp[pos]]=-1e+5#
		}#
#
		Theta_new[,,ind]=v_temp[,pos_temp]#
		for(k in 1:K){#
			Theta_new[, k, ind]=sign(Theta_new[1,k,ind]) * Theta_new[,k,ind]#
		}#
#
		alpha_new[,, ind] = t(Theta_new[,,ind]) %*% Theta_old[,,ind] %*% alpha_old[,,ind]#
	}#
}#
#
# proportion of variance explained by each PC (average over all draws)#
prop_var_avg = paste(round(colMeans(prop_var)*100, 2), '%', sep='')#
#
save(N, K, Q, alpha_new, theta_mu_new, Theta_new, prop_var_avg, results_basis, prepared_data, #
	 file="post_rotation_results.RData")#
#
pdf('screeplot.pdf')#
plot(prop_var_avg, xlab='Principal Component Functions', #
	ylab='Proportion of Variance Explained', ylim=c(0,1),type="b", main='Scree Plot')#
dev.off()
library(parallel)#
library(rstan)#
library(loo) # for waic()#
library(Matrix) # for bdiag(): construct a block diagnoal matrix#
options(mc.cores = parallel::detectCores())
load('prepared_data_dfm.RData')#
Nsamples = 1000#
Nchains = 3#
#
load('stan_results.RData')#
i = 3; k = npcs =2; d = nknots =1; #
sa = sa.list[[i]]#
source('../../sfpca.R')#
results_basis = basis_setup_sparse(prepared_data=prepared_data, nknots=d, orth=TRUE)#
#
Sigma = extract(sa,"Sigma",permuted=FALSE)#
W = extract(sa,"W",permuted=FALSE)#
sigma_eps = extract(sa,"sigma_eps",permuted=FALSE)#
theta_mu = extract(sa,"theta_mu",permuted=FALSE)#
alpha = extract(sa,"alpha",permuted=FALSE)#
Theta = extract(sa,"Theta",permuted=FALSE)#
## Reshape parameters and reorient loadings with PCA rotation #
N = prepared_data$num_subjects#
K = npcs#
Q = nknots + 4#
#
theta_mu_new = array(0, dim=c(Q, Nchains*Nsamples/2))#
alpha_old = alpha_new = array(0, dim=c(K, N, Nchains*Nsamples/2)) #
Theta_old = Theta_new = array(0, dim=c(Q, K, Nchains*Nsamples/2))#
W_old = array(0, dim=c(Q, Q, Nchains*Nsamples/2)) #
#
ind = 0#
prop_var = NULL#
for(i in 1:dim(W)[1]){#
	for(j in 1:dim(W)[2]){#
		ind = ind + 1#
		theta_mu_new[,ind] = array(theta_mu[i,j,])#
		alpha_old[,,ind] = t(array(alpha[i,j,],dim=c(N, K)))#
		Theta_old[,,ind] = array(Theta[i,j,],dim=c(Q, K))#
		W_old[,,ind] = array(W[i,j,],dim=c(Q,Q)) #
#
		eigen_temp_sigma=eigen(W_old[,,ind])#
		v_temp=eigen_temp_sigma$vectors#
		d_temp=eigen_temp_sigma$values #
		prop_var = rbind(prop_var, d_temp/sum(d_temp)) # proportion of variance explained by each PC#
#
		for(com in 1:length(d_temp)){#
			if(!(d_temp[com]-Re(d_temp[com])==0)){#
				d_temp[com]=-1*10^5#
			}#
		}#
		pos_temp=array(0,dim=c(K,1))#
		for(pos in 1:K){#
			pos_temp[pos]=(1:length(d_temp))[max(d_temp)==d_temp]#
			d_temp[pos_temp[pos]]=-1e+5#
		}#
#
		Theta_new[,,ind]=v_temp[,pos_temp]#
		for(k in 1:K){#
			Theta_new[, k, ind]=sign(Theta_new[1,k,ind]) * Theta_new[,k,ind]#
		}#
#
		alpha_new[,, ind] = t(Theta_new[,,ind]) %*% Theta_old[,,ind] %*% alpha_old[,,ind]#
	}#
}#
#
# proportion of variance explained by each PC (average over all draws)#
prop_var_avg = paste(round(colMeans(prop_var)*100, 2), '%', sep='')#
#
save(N, K, Q, alpha_new, theta_mu_new, Theta_new, prop_var_avg, results_basis, prepared_data, #
	 file="post_rotation_results.RData")#
#
pdf('screeplot.pdf')#
plot(prop_var_avg, xlab='Principal Component Functions', #
	ylab='Proportion of Variance Explained', ylim=c(0,1),type="b", main='Scree Plot')#
dev.off()
library(parallel)#
library(rstan)#
library(loo) # for waic()#
library(Matrix) # for bdiag(): construct a block diagnoal matrix#
options(mc.cores = parallel::detectCores())#
df=read.csv("dfm_bound.txt",header=TRUE, sep='\t')
source('../../sfpca.R')#
prepared_data = prepare_data(data=df, unique_subject_id = 'patient', time_var='time', #
	                         response='response', standardize.y=TRUE, scale.time=TRUE)#
save(prepared_data, file='prepared_data_dfm.RData')
load('prepared_data_dfm.RData')#
Nsamples = 1000#
Nchains = 3#
#
load('stan_results.RData')#
i = 3; k = npcs =2; d = nknots =1; #
sa = sa.list[[i]]#
source('../../sfpca.R')#
results_basis = basis_setup_sparse(prepared_data=prepared_data, nknots=d, orth=TRUE)#
#
Sigma = extract(sa,"Sigma",permuted=FALSE)#
W = extract(sa,"W",permuted=FALSE)#
sigma_eps = extract(sa,"sigma_eps",permuted=FALSE)#
theta_mu = extract(sa,"theta_mu",permuted=FALSE)#
alpha = extract(sa,"alpha",permuted=FALSE)#
Theta = extract(sa,"Theta",permuted=FALSE)
N = prepared_data$num_subjects#
K = npcs#
Q = nknots + 4#
#
theta_mu_new = array(0, dim=c(Q, Nchains*Nsamples/2))#
alpha_old = alpha_new = array(0, dim=c(K, N, Nchains*Nsamples/2)) #
Theta_old = Theta_new = array(0, dim=c(Q, K, Nchains*Nsamples/2))#
W_old = array(0, dim=c(Q, Q, Nchains*Nsamples/2)) #
#
ind = 0#
prop_var = NULL#
for(i in 1:dim(W)[1]){#
	for(j in 1:dim(W)[2]){#
		ind = ind + 1#
		theta_mu_new[,ind] = array(theta_mu[i,j,])#
		alpha_old[,,ind] = t(array(alpha[i,j,],dim=c(N, K)))#
		Theta_old[,,ind] = array(Theta[i,j,],dim=c(Q, K))#
		W_old[,,ind] = array(W[i,j,],dim=c(Q,Q)) #
#
		eigen_temp_sigma=eigen(W_old[,,ind])#
		v_temp=eigen_temp_sigma$vectors#
		d_temp=eigen_temp_sigma$values #
		prop_var = rbind(prop_var, d_temp/sum(d_temp)) # proportion of variance explained by each PC#
#
		for(com in 1:length(d_temp)){#
			if(!(d_temp[com]-Re(d_temp[com])==0)){#
				d_temp[com]=-1*10^5#
			}#
		}#
		pos_temp=array(0,dim=c(K,1))#
		for(pos in 1:K){#
			pos_temp[pos]=(1:length(d_temp))[max(d_temp)==d_temp]#
			d_temp[pos_temp[pos]]=-1e+5#
		}#
#
		Theta_new[,,ind]=v_temp[,pos_temp]#
		for(k in 1:K){#
			Theta_new[, k, ind]=sign(Theta_new[1,k,ind]) * Theta_new[,k,ind]#
		}#
#
		alpha_new[,, ind] = t(Theta_new[,,ind]) %*% Theta_old[,,ind] %*% alpha_old[,,ind]#
	}#
}#
#
# proportion of variance explained by each PC (average over all draws)#
prop_var_avg = paste(round(colMeans(prop_var)*100, 2), '%', sep='')#
#
save(N, K, Q, alpha_new, theta_mu_new, Theta_new, prop_var_avg, results_basis, prepared_data, #
	 file="post_rotation_results.RData")#
#
pdf('screeplot.pdf')#
plot(prop_var_avg, xlab='Principal Component Functions', #
	ylab='Proportion of Variance Explained', ylim=c(0,1),type="b", main='Scree Plot')#
dev.off()
prop_var_avg
prop_var_avg_origin = colMeans(prop_var)#
prop_var_avg = paste(round(colMeans(prop_var)*100, 2), '%', sep='')#
#
save(N, K, Q, alpha_new, theta_mu_new, Theta_new, prop_var_avg_origin, prop_var_avg, results_basis, prepared_data, #
	 file="post_rotation_results.RData")#
#
pdf('screeplot.pdf')#
plot(prop_var_avg_origin, xlab='Principal Component Functions', #
	ylab='Proportion of Variance Explained', ylim=c(0,1),type="b", main='Scree Plot')#
dev.off()
load("post_rotation_results.RData")#
vars_select = c('ID', 'patient', 'time', 'response', 'Version') # selected variables from prepared_data$data#
#
ALPHA_array = alpha_new#
MU_array = theta_mu_new#
THETA_array = Theta_new#
phi_t_cont = results_basis$orth_spline_basis_cont#
phi_t = results_basis$orth_spline_basis_sparse#
time_cont = results_basis$time_cont#
#
nloop=dim(ALPHA_array)[3]#
first=1#
last=nloop#
# N = prepared_data$num_subjects#
#
MU_mean = MU_array[, first] #mean function across sampling sessions#
ALPHA_mean = ALPHA_array[,,first] # mean factor scores#
THETA_mean = THETA_array[,,first] # mean factor loading#
#
for(iter in 2:nloop){#
	MU_mean = MU_mean + MU_array[, iter]#
	ALPHA_mean = ALPHA_mean + ALPHA_array[,,iter]#
	THETA_mean = THETA_mean + THETA_array[,,iter]#
}#
#
MU_mean=cbind(MU_mean/(last-first+1))#
ALPHA_mean=cbind(ALPHA_mean/(last-first+1))#
THETA_mean=cbind(THETA_mean/(last-first+1))#
#
Mu_functions = t(bdiag(cbind(phi_t_cont)))%*%MU_mean#
FPC_mean=t(phi_t_cont)%*%THETA_mean#
### create data frame containing needed information #####
df = prepared_data$data[, vars_select]#
Y_sparse = list()#
time_sparse = list()#
scores = data.frame(t(ALPHA_mean)) #
names(scores)=c("fpc1","fpc2")#
df$fpc1=0 # principle component scores#
df$fpc2=0#
#
i = 0#
for (pid in unique(df$ID)){#
	i = i + 1#
	Y_sparse[[i]] = df$response[df$ID == pid]#
	time_sparse[[i]] = df$time[df$ID == pid]#
	df$fpc1[df$ID == pid] = scores[i, 1]#
	df$fpc2[df$ID == pid] = scores[i, 2]#
}#
#
Fits_sparse=list()#
for(i in 1:N){#
	Fits_sparse[[i]] = t(phi_t[[i]]) %*% MU_mean + t(phi_t[[i]]) %*% THETA_mean %*% ALPHA_mean[, i]#
}#
#
df$Y_sparse = unlist(Y_sparse) # check: sum(df$Y_sparse != df$response) == 0#
df$Fits_sparse = unlist(Fits_sparse)#
df$residuals = df$Y_sparse - df$Fits_sparse#
df$residuals = df$Y_sparse - df$Fits_sparse
data = read.csv("dfm_bound.txt",header=TRUE, sep='\t')#
sigma_y = sd(data$response)#
mu_y = mean(data$response)
for (k in 1:K){#
	pdf(paste(paste('FPCs_mean_PC', k, sep=''), 'pdf', sep='.'), width = 4, height = 4)#
	plot(time_cont, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),#
	 lwd=2,col=1, xlab='time', ylab='response function', font.lab=2, cex.lab=1.2)#
	lines(time_cont, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red#
	lines(time_cont, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green#
	title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))#
	#axis(1, font=2) # make x-axis ticks label bold#
	legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)#
	dev.off()#
}
### each PC scores separately#
library(ggpubr)#
compare_means(fpc1 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot1 = ggboxplot(df, x = "Version", y = "fpc1",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"),#
      axis.text.x = element_text(face="bold", size=10),#
	  axis.text.y = element_text(face="bold", size=10)) +#
theme(legend.position="none") + ylab('PC 1 scores') # remove legend#
ggsave('boxplot_PC1_scores.pdf', width=3, height=3.2)#
#
compare_means(fpc2 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot2 = ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"),#
      axis.text.x = element_text(face="bold", size=10),#
	  axis.text.y = element_text(face="bold", size=10)) +#
theme(legend.position="none") + ylab('PC 2 scores') # remove legend#
ggsave('boxplot_PC2_scores.pdf', width=3, height=3.2)
ggplot(tmp.3, aes(x=time, y=response)) + geom_point() + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient3') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold")) +#
theme(legend.position="right")
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
tmp.1 = df[df$patient %in% c('1', '1_1x', '1_2x', '1_4x'), ]#
ggplot(tmp.1, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient1') + scale_color_manual(values=colpal)#
#
tmp.2 = df[df$patient %in% c('2', '2_1x', '2_2x', '2_4x'), ]#
ggplot(tmp.2, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient2') + scale_color_manual(values=colpal)#
#
tmp.3 = df[df$patient %in% c('3', '3_1x', '3_2x', '3_4x'), ]#
ggplot(tmp.3, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient3') + scale_color_manual(values=colpal)#
#
tmp.4 = df[df$patient %in% c('4', '4_1x', '4_2x', '4_4x'), ]#
ggplot(tmp.4, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +#
ggtitle('patient4') + scale_color_manual(values=colpal)#
#
tmp.5 = df[df$patient %in% c('5', '5_1x', '5_2x', '5_4x'), ]#
ggplot(tmp.5, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient5') + scale_color_manual(values=colpal)#
#
tmp.6 = df[df$patient %in% c('6', '6_1x', '6_2x', '6_4x'), ]#
ggplot(tmp.6, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient6') + scale_color_manual(values=colpal)#
#
tmp.7 = df[df$patient %in% c('7', '7_1x', '7_2x', '7_4x'), ]#
ggplot(tmp.7, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient7') + scale_color_manual(values=colpal)#
#
tmp.8 = df[df$patient %in% c('8', '8_1x', '8_2x', '8_4x'), ]#
ggplot(tmp.8, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient8') + scale_color_manual(values=colpal)#
#
tmp.9 = df[df$patient %in% c('9', '9_1x', '9_2x', '9_4x'), ]#
ggplot(tmp.9, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient9') + scale_color_manual(values=colpal)#
#
tmp.10 = df[df$patient %in% c('10', '10_1x', '10_2x', '10_4x'), ]#
ggplot(tmp.10, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient10') + scale_color_manual(values=colpal)
ggplot(tmp.3, aes(x=time, y=response)) + geom_point() + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient3') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold")) +#
theme(legend.position="right")
ggplot(tmp.3, aes(x=time, y=response)) + geom_point() + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient3') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold"))
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
tmp.1 = df[df$patient %in% c('1', '1_1x', '1_2x', '1_4x'), ]#
ggplot(tmp.1, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient1') + scale_color_manual(values=colpal)#
#
tmp.2 = df[df$patient %in% c('2', '2_1x', '2_2x', '2_4x'), ]#
ggplot(tmp.2, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient2') + scale_color_manual(values=colpal)#
#
tmp.3 = df[df$patient %in% c('3', '3_1x', '3_2x', '3_4x'), ]#
ggplot(tmp.3, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient3') + scale_color_manual(values=colpal)#
#
tmp.4 = df[df$patient %in% c('4', '4_1x', '4_2x', '4_4x'), ]#
ggplot(tmp.4, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +#
ggtitle('patient4') + scale_color_manual(values=colpal)#
#
tmp.5 = df[df$patient %in% c('5', '5_1x', '5_2x', '5_4x'), ]#
ggplot(tmp.5, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient5') + scale_color_manual(values=colpal)#
#
tmp.6 = df[df$patient %in% c('6', '6_1x', '6_2x', '6_4x'), ]#
ggplot(tmp.6, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient6') + scale_color_manual(values=colpal)#
#
tmp.7 = df[df$patient %in% c('7', '7_1x', '7_2x', '7_4x'), ]#
ggplot(tmp.7, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient7') + scale_color_manual(values=colpal)#
#
tmp.8 = df[df$patient %in% c('8', '8_1x', '8_2x', '8_4x'), ]#
ggplot(tmp.8, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient8') + scale_color_manual(values=colpal)#
#
tmp.9 = df[df$patient %in% c('9', '9_1x', '9_2x', '9_4x'), ]#
ggplot(tmp.9, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient9') + scale_color_manual(values=colpal)#
#
tmp.10 = df[df$patient %in% c('10', '10_1x', '10_2x', '10_4x'), ]#
ggplot(tmp.10, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient10') + scale_color_manual(values=colpal)
ggplot(tmp.1, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient1') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold"))
library(parallel)#
library(rstan)#
library(loo) # for waic()#
library(Matrix) # for bdiag(): construct a block diagnoal matrix#
options(mc.cores = parallel::detectCores())#
df=read.csv("dfm_bound.txt",header=TRUE, sep='\t')
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
tmp.1 = df[df$patient %in% c('1', '1_1x', '1_2x', '1_4x'), ]#
ggplot(tmp.1, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient1') + scale_color_manual(values=colpal)#
#
tmp.2 = df[df$patient %in% c('2', '2_1x', '2_2x', '2_4x'), ]#
ggplot(tmp.2, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient2') + scale_color_manual(values=colpal)#
#
tmp.3 = df[df$patient %in% c('3', '3_1x', '3_2x', '3_4x'), ]#
ggplot(tmp.3, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient3') + scale_color_manual(values=colpal)#
#
tmp.4 = df[df$patient %in% c('4', '4_1x', '4_2x', '4_4x'), ]#
ggplot(tmp.4, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) +#
ggtitle('patient4') + scale_color_manual(values=colpal)#
#
tmp.5 = df[df$patient %in% c('5', '5_1x', '5_2x', '5_4x'), ]#
ggplot(tmp.5, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient5') + scale_color_manual(values=colpal)#
#
tmp.6 = df[df$patient %in% c('6', '6_1x', '6_2x', '6_4x'), ]#
ggplot(tmp.6, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient6') + scale_color_manual(values=colpal)#
#
tmp.7 = df[df$patient %in% c('7', '7_1x', '7_2x', '7_4x'), ]#
ggplot(tmp.7, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient7') + scale_color_manual(values=colpal)#
#
tmp.8 = df[df$patient %in% c('8', '8_1x', '8_2x', '8_4x'), ]#
ggplot(tmp.8, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient8') + scale_color_manual(values=colpal)#
#
tmp.9 = df[df$patient %in% c('9', '9_1x', '9_2x', '9_4x'), ]#
ggplot(tmp.9, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient9') + scale_color_manual(values=colpal)#
#
tmp.10 = df[df$patient %in% c('10', '10_1x', '10_2x', '10_4x'), ]#
ggplot(tmp.10, aes(x=time, y=response)) + geom_line() + guides(colour=FALSE) + #
xlab("Observed Time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient10') + scale_color_manual(values=colpal)
ggplot(tmp.1, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient1') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold"))
ggplot(tmp.3, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient3') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold")) +#
theme(legend.position="right")
ggplot(tmp.3, aes(x=time, y=response)) + geom_line(size=1.2) + guides(colour=FALSE) + #
xlab("time") + ylab("response") + aes(colour = factor(patient)) + #
ggtitle('patient3') + scale_color_manual(values=colpal) +#
theme(plot.title = element_text(hjust = 0.5)) + ylim(84, 131) +#
theme(axis.title.x = element_text(face="bold"),#
      axis.title.y = element_text(face="bold")) +#
theme(legend.position="right")#
ggsave('Observed_patient3.pdf', width = 4, height = 3, dpi=600)
load("post_rotation_results.RData")#
vars_select = c('ID', 'patient', 'time', 'response', 'Version') # selected variables from prepared_data$data#
#
ALPHA_array = alpha_new#
MU_array = theta_mu_new#
THETA_array = Theta_new#
phi_t_cont = results_basis$orth_spline_basis_cont#
phi_t = results_basis$orth_spline_basis_sparse#
time_cont = results_basis$time_cont#
#
nloop=dim(ALPHA_array)[3]#
first=1#
last=nloop#
# N = prepared_data$num_subjects#
#
MU_mean = MU_array[, first] #mean function across sampling sessions#
ALPHA_mean = ALPHA_array[,,first] # mean factor scores#
THETA_mean = THETA_array[,,first] # mean factor loading#
#
for(iter in 2:nloop){#
	MU_mean = MU_mean + MU_array[, iter]#
	ALPHA_mean = ALPHA_mean + ALPHA_array[,,iter]#
	THETA_mean = THETA_mean + THETA_array[,,iter]#
}#
#
MU_mean=cbind(MU_mean/(last-first+1))#
ALPHA_mean=cbind(ALPHA_mean/(last-first+1))#
THETA_mean=cbind(THETA_mean/(last-first+1))#
#
Mu_functions = t(bdiag(cbind(phi_t_cont)))%*%MU_mean#
FPC_mean=t(phi_t_cont)%*%THETA_mean#
### create data frame containing needed information #####
df = prepared_data$data[, vars_select]#
Y_sparse = list()#
time_sparse = list()#
scores = data.frame(t(ALPHA_mean)) #
names(scores)=c("fpc1","fpc2")#
df$fpc1=0 # principle component scores#
df$fpc2=0#
#
i = 0#
for (pid in unique(df$ID)){#
	i = i + 1#
	Y_sparse[[i]] = df$response[df$ID == pid]#
	time_sparse[[i]] = df$time[df$ID == pid]#
	df$fpc1[df$ID == pid] = scores[i, 1]#
	df$fpc2[df$ID == pid] = scores[i, 2]#
}#
#
Fits_sparse=list()#
for(i in 1:N){#
	Fits_sparse[[i]] = t(phi_t[[i]]) %*% MU_mean + t(phi_t[[i]]) %*% THETA_mean %*% ALPHA_mean[, i]#
}#
#
df$Y_sparse = unlist(Y_sparse) # check: sum(df$Y_sparse != df$response) == 0#
df$Fits_sparse = unlist(Fits_sparse)#
df$residuals = df$Y_sparse - df$Fits_sparse#
df$residuals = df$Y_sparse - df$Fits_sparse
library(ggpubr)#
compare_means(fpc1 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot1 = ggboxplot(df, x = "Version", y = "fpc1",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"),#
      axis.text.x = element_text(face="bold", size=10),#
	  axis.text.y = element_text(face="bold", size=10)) +#
theme(legend.position="right") + ylab('PC 1 scores')
plot1
library(ggpubr)#
compare_means(fpc1 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot1 = ggboxplot(df, x = "Version", y = "fpc1",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"),#
      axis.text.x = element_text(face="bold", size=10),#
	  axis.text.y = element_text(face="bold", size=10)) +#
theme(legend.position="right") + ylab('PC 1 scores') #
ggsave('boxplot_PC1_scores.pdf', width=3, height=3.2)#
#
compare_means(fpc2 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot2 = ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"),#
      axis.text.x = element_text(face="bold", size=10),#
	  axis.text.y = element_text(face="bold", size=10)) +#
theme(legend.position="right") + ylab('PC 2 scores') # remove legend#
ggsave('boxplot_PC2_scores.pdf', width=3, height=3.2)
### each PC scores separately#
library(ggpubr)#
compare_means(fpc1 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot1 = ggboxplot(df, x = "Version", y = "fpc1",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") + # Add pairwise comparisons p-value#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"),#
      axis.text.x = element_text(face="bold", size=10),#
	  axis.text.y = element_text(face="bold", size=10)) +#
theme(legend.position="right") + ylab('PC 1 scores') #
ggsave('boxplot_PC1_scores.pdf', width=4, height=3.2)#
#
compare_means(fpc2 ~ Version,  data = df, method = "t.test")#
my_comparisons <- list(c("baseline", "shift_1x"), c("baseline", "shift_2x"),#
	                   c("baseline", "shift_4x"))#
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")#
plot2 = ggboxplot(df, x = "Version", y = "fpc2",#
          color = "Version", palette = colpal)+ #
stat_compare_means(comparisons = my_comparisons, method = "t.test") +#
theme(text = element_text(size=12), #
	  axis.title.x = element_text(size=18, face="bold"),#
      axis.title.y = element_text(size=18, face="bold"),#
      axis.text.x = element_text(face="bold", size=10),#
	  axis.text.y = element_text(face="bold", size=10)) +#
theme(legend.position="right") + ylab('PC 2 scores') # remove legend#
ggsave('boxplot_PC2_scores.pdf', width=4, height=3.2)
for (k in 1:K){#
	pdf(paste(paste('FPCs_mean_PC', k, sep=''), 'pdf', sep='.'), width = 4, height = 4)#
	plot(time_cont*22, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),#
	 lwd=2,col=1, xlab='time', ylab='response function', font.lab=2, cex.lab=1.2)#
	lines(time_cont*22, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red#
	lines(time_cont*22, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green#
	title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))#
	#axis(1, font=2) # make x-axis ticks label bold#
	legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)#
	dev.off()#
}
data = read.csv("dfm_bound.txt",header=TRUE, sep='\t')#
sigma_y = sd(data$response)#
mu_y = mean(data$response)
for (k in 1:K){#
	pdf(paste(paste('FPCs_mean_PC', k, sep=''), 'pdf', sep='.'), width = 4, height = 4)#
	plot(time_cont*22, Mu_functions*sigma_y + mu_y, type="l", ylim=c(84, 121),#
	 lwd=2,col=1, xlab='time', ylab='response function', font.lab=2, cex.lab=1.2)#
	lines(time_cont*22, (Mu_functions + FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=2) # red#
	lines(time_cont*22, (Mu_functions - FPC_mean[,k])*sigma_y + mu_y,type="l",lwd=3,lty=2,col=3) # green#
	title(main=paste(paste('PC', k, sep=' '), ' (', prop_var_avg[k], ' )', sep=''))#
	#axis(1, font=2) # make x-axis ticks label bold#
	legend('topright', c('+ pc', '- pc'), lty=c(2,2), lwd=c(3,3), col=c(2, 3), bty='n', cex=0.5)#
	dev.off()#
}
