dfm3 <- df_orig
dfm4 <- df_orig
dfm5 <- df_orig
z <- c(0,0.02,0.12,0.35,0.45,.55,0.45,0.38,0.2,0.1,0.01,0)  # Values by which to perturb the data
shifter <- c(z,z,z,z,z,z,z,z,z,z)
dfm2$Version <- 'baseline'
# Make perturbed data at several magnitudes by scaling z
dfm3$response <- dfm2$response + (dfm2$response * (shifter/20))
dfm3$Version <- 'shift_1x'; dfm3$patient <- paste(dfm3$patient, '1x', sep = '_')
dfm4$response <- dfm2$response + (dfm2$response * (shifter/10))
dfm4$Version <- 'shift_2x'; dfm4$patient <- paste(dfm4$patient, '2x', sep = '_')
dfm5$response <- dfm2$response + (dfm2$response * (shifter/5))
dfm5$Version <- 'shift_4x'; dfm5$patient <- paste(dfm5$patient, '4x', sep = '_')
dfm_bound <- rbind(dfm2, dfm3, dfm4, dfm5)
dfm_loess <- ggplot(dfm_bound) + geom_smooth(aes(x=time, y=response, color=Version), se = F, method = 'loess') +
geom_point(aes(x=time, y=response, color=Version), alpha=0.5, size=1.2) +
theme_classic() + theme(axis.text = element_text(color='black')) +
scale_color_manual(values=colpal)
#ggsave(dfm_loess, filename = '~/Box Sync/knights_box/splinectomer/doc/manuscript/figures/FigXA_dfmloess.png', width = 4, height = 3, dpi=600)
dfm_lm <- ggplot(dfm_bound) + geom_smooth(aes(x=time, y=response, color=Version), se = F, method = 'lm') +
geom_point(aes(x=time, y=response, color=Version), alpha=0.5, size=1.2) +
theme_classic() + theme(axis.text = element_text(color='black')) +
scale_color_manual(values=colpal)
#ggsave(dfm_lm, filename = '~/Box Sync/knights_box/splinectomer/doc/manuscript/figures/FigXA_dfmlm.png', width = 4, height = 3, dpi=600)
dfm_loess
dfm_lm
### simulation setting for splinectomeR ####library(ggplot2)
library(ggplot2)
library(reshape2)
#library(splinectomeR)
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
df_orig <- data.frame(matrix(ncol=3, nrow = 120))
colnames(df_orig) <- c('patient','time','response')
ids <- c(1,2,3,4,5,6,7,8,9,10)
timeseries <- c(0,2,4,6,8,10,12,14,16,18,20,22)
patient <- unlist(lapply(X = ids, FUN = function(xx) rep(xx, times=12)))
set.seed(7)
obs <- c(rnorm(n=10, mean = 100, sd = 2),  # Make a distribution at each timepoint
rnorm(n=10, mean = 100, sd = 4),
rnorm(n=10, mean = 100, sd = 6),
rnorm(n=10, mean = 100, sd = 8),
rnorm(n=10, mean = 100, sd = 6),
rnorm(n=10, mean = 100, sd = 4),
rnorm(n=10, mean = 100, sd = 6),
rnorm(n=10, mean = 100, sd = 8),
rnorm(n=10, mean = 100, sd = 6),
rnorm(n=10, mean = 100, sd = 4),
rnorm(n=10, mean = 100, sd = 3),
rnorm(n=10, mean = 100, sd = 2))
df_orig$patient <- patient
df_orig$time <-rep(timeseries, times = 10)
df_orig$response <- obs
df <- df_orig
#### A bump in the middle ####
dfm2 <- df_orig
dfm3 <- df_orig
dfm4 <- df_orig
dfm5 <- df_orig
z <- c(0,0.02,0.12,0.35,0.45,.55,0.45,0.38,0.2,0.1,0.01,0)  # Values by which to perturb the data
shifter <- c(z,z,z,z,z,z,z,z,z,z)
dfm2$Version <- 'baseline'
# Make perturbed data at several magnitudes by scaling z
dfm3$response <- dfm2$response + (dfm2$response * (shifter/20))
dfm3$Version <- 'shift_1x'; dfm3$patient <- paste(dfm3$patient, '1x', sep = '_')
dfm4$response <- dfm2$response + (dfm2$response * (shifter/10))
dfm4$Version <- 'shift_2x'; dfm4$patient <- paste(dfm4$patient, '2x', sep = '_')
dfm5$response <- dfm2$response + (dfm2$response * (shifter/5))
dfm5$Version <- 'shift_4x'; dfm5$patient <- paste(dfm5$patient, '4x', sep = '_')
dfm_bound <- rbind(dfm2, dfm3, dfm4, dfm5)
dfm_loess <- ggplot(dfm_bound) + geom_smooth(aes(x=time, y=response, color=Version), se = F, method = 'loess') +
geom_point(aes(x=time, y=response, color=Version), alpha=0.5, size=1.2) +
theme_classic() + theme(axis.text = element_text(color='black')) +
scale_color_manual(values=colpal)
ggsave(dfm_loess, filename = 'FigXA_dfmloess.png', width = 4, height = 3, dpi=600)
dfm_lm <- ggplot(dfm_bound) + geom_smooth(aes(x=time, y=response, color=Version), se = F, method = 'lm') +
geom_point(aes(x=time, y=response, color=Version), alpha=0.5, size=1.2) +
theme_classic() + theme(axis.text = element_text(color='black')) +
scale_color_manual(values=colpal)
ggsave(dfm_lm, filename = 'FigXA_dfmlm.png', width = 4, height = 3, dpi=600)
c(rep(2,5),rep(-2,5),rep(.1,990)
)
library(c060)
res <- stabpath(y,x,weakness=1,mc.cores=2)
plot(res,error=.5,type='pfer')
set.seed(1234)
x=matrix(rnorm(100*1000,0,1),100,1000)
y <- x[1:100,1:1000]%*%c(rep(2,5),rep(-2,5),rep(.1,990))
library(c060)
res <- stabpath(y,x,weakness=1,mc.cores=2)
plot(res,error=.5,type='pfer')
log(0)
exp(1)
exp(-3)
bodyfat <- matrix(rnorm(720), nrow = 72, ncol = 10)
head(bodyfat)
(stab.lasso <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
fitfun = lars.lasso, cutoff = 0.75,
PFER = 1))
par(mfrow = c(2, 1))
plot(stab.lasso, ymargin = 6)
opar <- par(mai = par("mai") * c(1, 1, 1, 2.7))
plot(stab.lasso, type = "paths")
set.seed(1234)
library(stabs)
(stab.lasso <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
fitfun = lars.lasso, cutoff = 0.75,
PFER = 1))
par(mfrow = c(2, 1))
plot(stab.lasso, ymargin = 6)
opar <- par(mai = par("mai") * c(1, 1, 1, 2.7))
plot(stab.lasso, type = "paths")
stab.lasso
stab.select <- stabsel(x=x, y=y, fitfun=lars.lasso, cutoff=0.6, PFER=0.5)
stab.select
set.seed(1234)
x=matrix(rnorm(100*1000,0,1),100,1000)
dim(x)
y <- x %*% c(rep(2,5),rep(-2,5),rep(.1,990))
library(c060) # test on library(c060)
res <- stabpath(y,x,weakness=1,mc.cores=2)
plot(res,error=.5,type='pfer')
plot(res,error=.05,type='pcer')
library(stabs)
stab.select <- stabsel(x, y, fitfun=lars.lasso, cutoff=0.6, PFER=0.5, sampling.type='MB')
names(stab.select)
stab.select
system.time(res)
system.time(stabpath(y,x,weakness=1,mc.cores=2))
plot(res,error=.5,type='pfer')
system.time(stabsel(x, y, fitfun=lars.lasso, cutoff=0.6, PFER=0.5, sampling.type='MB'))
install.packages('plsgenomics')
library(plsgenomics)
### generating data
n <- 100
p <- 100
sample1 <- sample.cont(n=n, p=p, kstar=10, lstar=2,
beta.min=0.25, beta.max=0.75, mean.H=0.2,
sigma.H=10, sigma.F=5, sigma.E=5)
X <- sample1$X
Y <- sample1$Y
dim(X)
dim(Y)
head(X)
lambda.l1.range <- seq(0.05,0.95,by=0.1) # between 0 and 1
ncomp.range <- 1:10
### tuning the hyper-parameters
stab1 <- spls.stab(X=X, Y=Y, lambda.l1.range=lambda.l1.range,
ncomp.range=ncomp.range, weight.mat=NULL,
adapt=FALSE, center.X=TRUE, center.Y=TRUE,
scale.X=TRUE, scale.Y=TRUE, weighted.center=FALSE,
ncores=1, nresamp=100)
str(stab1)
stab1$probs.lambda
dim(probs.lambda)
dim(stab1$probs.lambda)
length(lambda.l1.range )
str(stab1)
dim(X)
stability.selection(stab1, piThreshold=0.6, rhoError=10)
plot(res,error=2,type='pfer')
library(dplyr)
library(tibble)
library(ggplot2)
library(reshape2)
library(tidyr)
library(splinectomeR)
library(vegan)
otus <- filtered_otu_table
sample_names <- colnames(otus)
sample_time <- lapply(sample_names, FUN = function(x) strsplit(x, split = '_'))
timeseries <- data.frame(matrix(nrow = 1101, ncol = 2, data = 0))
j = 1
for (i in sample_time) {
timeseries[j,1] <- i[[1]][1]
timeseries[j,2] <- i[[1]][2]
j = j + 1
}
colnames(timeseries) <- c('sample_id', 'month')
head(timeseries, n=4)
abx <- antibiotics_metadata
abx_pos <- unique(abx$Subject)
abx_df <- data.frame(abx_pos, 'Y')
abx_neg <- setdiff(timeseries$sample_id, abx_pos)
abx_df2 <- setNames(data.frame(abx_neg, 'N'), c('abx_pos', 'X.Y.'))
abx_df <- rbind(abx_df, abx_df2)
colnames(abx_df) <- c('baby_id', 'antibiotics_y_n')
dim(abx_df)
head(abx_df)
head(abx_df, n=4)
library(dplyr)
library(tibble)
library(ggplot2)
library(reshape2)
library(tidyr)
library(splinectomeR)
library(vegan)
# source link: https://rrshieldscutler.github.io/splinectomeR/yassour_antibiotics_web.html
# Create the binary antibiotic exposure annotation: data existing within splinectomeR package
abx <- antibiotics_metadata
abx_pos <- unique(abx$Subject)
abx_df <- data.frame(abx_pos, 'Y')
abx_neg <- setdiff(timeseries$sample_id, abx_pos)
abx_df2 <- setNames(data.frame(abx_neg, 'N'), c('abx_pos', 'X.Y.'))
abx_df <- rbind(abx_df, abx_df2)
colnames(abx_df) <- c('baby_id', 'antibiotics_y_n')
dim(abx_df)
head(abx_df, n=4)
# Now, merge OTUs with each piece of the metadata
otus <- filtered_otu_table
otus <- data.frame(t(otus))
otus <- tibble::rownames_to_column(otus, var = 'sampleID')
otus_split <- otus %>% separate(sampleID, c('baby_id', 'timepoint'), sep = '_')
row.names(otus_split) <- otus$sampleID
otus_split <- rownames_to_column(otus_split, var = '#SampleID')
metadata <- general_metadata
colnames(metadata)[1] <- 'baby_id'
metadata <- merge(metadata, abx_df, by = 'baby_id')
# Merge the metadata with the OTU table to create a master metadata
# file including the taxonomy abundances
full_data <- merge(metadata, otus_split, by = 'baby_id')
x <- '#SampleID'
# Move the "#SampleID" column to the front:
full_data <- full_data[c(x, setdiff(names(full_data), x))]
head(full_data)
otus <- filtered_otu_table
otus <- tibble::rownames_to_column(otus, var = 'OTU_ID')
otus_family <- otus %>% filter(!grepl('g__', otus$OTU_ID) & grepl('f__', otus$OTU_ID))
otus_family_sum <- otus_family
otus_family_sum$f__abun <- rowSums(otus_family[, 2:ncol(otus_family)])
otus_family_sum <- otus_family_sum[c('f__abun',
setdiff(names(otus_family_sum), 'f__abun'))]
otus_family_sum <- otus_family_sum[order(-otus_family_sum$f__abun), ]
# write_delim(otus_family_sum, 'family_level_OTUs_with_sums.txt', delim = '\t')
# The top 10 Families in this dataset
otus_family_sum[1:10, 2]
colSums(otus_family_sum[, 3:10])
# Define a function for all the tedious flipping, splitting, and merging
flip_split_merge <- function(otus_in, metadata) {
row.names(otus_in) <- otus_in$OTU_ID
otus_in$OTU_ID <- NULL
otus_in <- data.frame(t(otus_in))
otus_in <- tibble::rownames_to_column(otus_in, var = 'sampleID')
otus_split <- otus_in %>% separate(sampleID, c('baby_id', 'timepoint'), sep = '_')
otus_split$timepoint <- as.numeric(otus_split$timepoint)  # Trouble recognizing numbers
row.names(otus_split) <- otus_in$sampleID
otus_split <- rownames_to_column(otus_split, var = 'SampleID')
otus_meta <- merge(metadata, otus_split, by = 'baby_id')
otus_meta <- otus_meta[c('SampleID', setdiff(names(otus_meta), 'SampleID'))]
return(otus_meta)
}
family_tax_metadata <- flip_split_merge(otus_family, metadata)
top_10_families <- otus_family_sum[1:10, 2]
top_10_families <- lapply(top_10_families, FUN = function(x) gsub(x, pattern = '|',
replacement = '.',
fixed = T))
top_family_meta <- family_tax_metadata %>%
gather(key = 'family', value = 'relative_abundance',
13:as.numeric(ncol(family_tax_metadata))) %>%
filter(family %in% top_10_families)
# Double check that it worked:
unique(top_family_meta$family)
plot.df <- top_family_meta
plot.df <- separate(plot.df, col = family, sep = 'f__', remove = T,
into = c('uplevel', 'family'))
plot.df$uplevel <- NULL
ggplot(plot.df, aes(color = family, x = timepoint, y = relative_abundance)) +
theme_bw() + geom_smooth(method='loess', span = 0.5) +
labs(x = 'months', y = 'relative abundance') +
theme(legend.position = 'right') + scale_x_continuous(breaks = c(0,12,24,36)) +
theme(panel.grid = element_blank())
# Test the difference between Bacteroidaceae abundance in
#  antibiotic exposed vs. non-exposed conditions
f__Bacteroidaceae.top_family_meta <- top_family_meta %>% filter(family == 'k__Bacteria.p__Bacteroidetes.c__Bacteroidia.o__Bacteroidales.f__Bacteroidaceae')
bacteroidaceae_result <- permuspliner(data = f__Bacteroidaceae.top_family_meta, xvar = 'timepoint',
yvar = 'relative_abundance', perms = 99,
category = 'antibiotics_y_n', cases = 'baby_id', retain_perm = T)
permuspliner.plot.permdistance(bacteroidaceae_result, xlabel = 'timepoint')
slide_result <- sliding_spliner(data = f__Bacteroidaceae.top_family_meta,
xvar = 'timepoint', yvar = 'relative_abundance',
category = 'antibiotics_y_n', cases = 'baby_id',
test_density = 10, cut_low = 7,
set_spar = 0.5)
library(dplyr)
library(tibble)
library(ggplot2)
library(reshape2)
library(tidyr)
library(splinectomeR)
library(vegan)
# source link: https://rrshieldscutler.github.io/splinectomeR/yassour_antibiotics_web.html
# Create the binary antibiotic exposure annotation: data existing within splinectomeR package
abx <- antibiotics_metadata
abx_pos <- unique(abx$Subject)
abx_df <- data.frame(abx_pos, 'Y')
abx_neg <- setdiff(timeseries$sample_id, abx_pos)
abx_df2 <- setNames(data.frame(abx_neg, 'N'), c('abx_pos', 'X.Y.'))
abx_df <- rbind(abx_df, abx_df2)
colnames(abx_df) <- c('baby_id', 'antibiotics_y_n')
dim(abx_df)
head(abx_df, n=4)
# Now, merge OTUs with each piece of the metadata
otus <- filtered_otu_table
otus <- data.frame(t(otus))
otus <- tibble::rownames_to_column(otus, var = 'sampleID')
otus_split <- otus %>% separate(sampleID, c('baby_id', 'timepoint'), sep = '_')
row.names(otus_split) <- otus$sampleID
otus_split <- rownames_to_column(otus_split, var = '#SampleID')
metadata <- general_metadata
colnames(metadata)[1] <- 'baby_id'
metadata <- merge(metadata, abx_df, by = 'baby_id')
# Merge the metadata with the OTU table to create a master metadata
# file including the taxonomy abundances
full_data <- merge(metadata, otus_split, by = 'baby_id')
x <- '#SampleID'
# Move the "#SampleID" column to the front:
full_data <- full_data[c(x, setdiff(names(full_data), x))]
# focus on family level only
otus <- filtered_otu_table
otus <- tibble::rownames_to_column(otus, var = 'OTU_ID')
otus_family <- otus %>% filter(!grepl('g__', otus$OTU_ID) & grepl('f__', otus$OTU_ID))
otus_family_sum <- otus_family
otus_family_sum$f__abun <- rowSums(otus_family[, 2:ncol(otus_family)])
otus_family_sum <- otus_family_sum[c('f__abun',
setdiff(names(otus_family_sum), 'f__abun'))]
otus_family_sum <- otus_family_sum[order(-otus_family_sum$f__abun), ]
# write_delim(otus_family_sum, 'family_level_OTUs_with_sums.txt', delim = '\t')
# The top 10 Families in this dataset
otus_family_sum[1:10, 2]
colSums(otus_family_sum[, 3:10])
# Define a function for all the tedious flipping, splitting, and merging
flip_split_merge <- function(otus_in, metadata) {
row.names(otus_in) <- otus_in$OTU_ID
otus_in$OTU_ID <- NULL
otus_in <- data.frame(t(otus_in))
otus_in <- tibble::rownames_to_column(otus_in, var = 'sampleID')
otus_split <- otus_in %>% separate(sampleID, c('baby_id', 'timepoint'), sep = '_')
otus_split$timepoint <- as.numeric(otus_split$timepoint)  # Trouble recognizing numbers
row.names(otus_split) <- otus_in$sampleID
otus_split <- rownames_to_column(otus_split, var = 'SampleID')
otus_meta <- merge(metadata, otus_split, by = 'baby_id')
otus_meta <- otus_meta[c('SampleID', setdiff(names(otus_meta), 'SampleID'))]
return(otus_meta)
}
otus_genus <- otus %>% filter(!grepl('s__', otus$OTU_ID) & grepl('g__', otus$OTU_ID))
alphadiv <- as.data.frame(diversity(t(otus_genus[,2:ncol(otus_genus)]), 'shannon'))
alphadiv <- tibble::rownames_to_column(alphadiv, var = 'sampleID')
colnames(alphadiv)[2] <- 'shannon'
alphadiv <- alphadiv %>% separate(sampleID, c('baby_id', 'timepoint'), sep = '_')
alphadiv$timepoint <- as.numeric(alphadiv$timepoint)
alphadiv$shannon <- as.numeric(alphadiv$shannon)
alphadiv_meta <- merge(metadata, alphadiv, by = 'baby_id')
alpha_permresult_abx <- permuspliner(data = alphadiv_meta, xvar = 'timepoint',
yvar = 'shannon', category = 'antibiotics_y_n',
cases = 'baby_id', perms = 99, retain_perm = T,
quiet = T)
alpha_permresult_mode <- permuspliner(data = alphadiv_meta, xvar = 'timepoint',
yvar = 'shannon', category = 'birth_mode',
cases = 'baby_id', perms = 99, retain_perm = T,
quiet = T)
p_abx <- permuspliner.plot.permsplines(data = alpha_permresult_abx,
xvar = 'timepoint', yvar = 'shannon')
p_mode <- permuspliner.plot.permsplines(data = alpha_permresult_mode,
xvar = 'timepoint', yvar = 'shannon')
p_abx
head(alphadiv_meta)
alpha_permresult_abx <- permuspliner(data = alphadiv_meta, xvar = 'timepoint',
yvar = 'shannon', category = 'antibiotics_y_n',
cases = 'baby_id', perms = 99, retain_perm = T,
quiet = T)
alpha_permresult_abx <- permuspliner(data = alphadiv_meta, xvar = 'timepoint',
yvar = 'shannon', category = 'antibiotics_y_n',
cases = 'baby_id', perms = 99, retain_perm = T,
quiet = T)
data(varespec)
data(varechem)
library(vegan)
data(varespec)
data(varechem)
cca(varespec ~ Ca, varechem)
cca(varespec ~ Ca + Condition(pH), varechem)
rda(varespec ~ Ca + Condition(pH), varechem)
0.1282  + 0.1212 + 0.7506
data(dune, dune.env)
mod <- rda(dune, scale = TRUE)
plot(mod)
colvec <- c("red2", "green4", "mediumblue")
head(dune)
with(dune.env, points(mod, display = "sites", col = colvec[Use], pch=21))
with(dune.env, points(mod, display = "sites", col = colvec[Use],
scaling = scl, pch = 21, bg = colvec[Use]))
with(dune.env, points(mod, display = "sites", col = colvec[Use],
, pch = 21, bg = colvec[Use]))
with(dune.env, legend("topright", legend = levels(Use), bty = "n",
col = colvec, pch = 21, pt.bg = colvec))
with(dune.env, legend("topright", legend = levels(Use), bty = "n",
col = colvec, pch = 21, pt.bg = colvec))
require("vegan")
## load the Dune data
data(dune, dune.env)
## PCA of the Dune data
mod <- rda(dune, scale = TRUE)
colvec <- c("red2", "green4", "mediumblue")
scl <- 3
with(dune.env, legend("topright", legend = levels(Use), bty = "n",
col = colvec, pch = 21, pt.bg = colvec))
with(dune.env, points(mod, display = "sites", col = colvec[Use],
scaling = scl, pch = 21, bg = colvec[Use]))
plot(mod, type = "n", scaling = scl)
with(dune.env, legend("topright", legend = levels(Use), bty = "n",
col = colvec, pch = 21, pt.bg = colvec))
with(dune.env, points(mod, display = "sites", col = colvec[Use],
scaling = scl, pch = 21, bg = colvec[Use]))
plot(mod)
plot(mod, choices=c(1,3))
library(ggplot2)
library(reshape2)
#library(splinectomeR)
colpal <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
df_orig <- data.frame(matrix(ncol=3, nrow = 120))
colnames(df_orig) <- c('patient','time','response')
ids <- c(1,2,3,4,5,6,7,8,9,10)
timeseries <- c(0,2,4,6,8,10,12,14,16,18,20,22)
patient <- unlist(lapply(X = ids, FUN = function(xx) rep(xx, times=12)))
set.seed(7)
obs <- c(rnorm(n=10, mean = 100, sd = 2),  # Make a distribution at each timepoint
rnorm(n=10, mean = 100, sd = 4),
rnorm(n=10, mean = 100, sd = 6),
rnorm(n=10, mean = 100, sd = 8),
rnorm(n=10, mean = 100, sd = 6),
rnorm(n=10, mean = 100, sd = 4),
rnorm(n=10, mean = 100, sd = 6),
rnorm(n=10, mean = 100, sd = 8),
rnorm(n=10, mean = 100, sd = 6),
rnorm(n=10, mean = 100, sd = 4),
rnorm(n=10, mean = 100, sd = 3),
rnorm(n=10, mean = 100, sd = 2))
df_orig$patient <- patient
df_orig$time <-rep(timeseries, times = 10)
df_orig$response <- obs
df <- df_orig
head(df)
summary(df[df$patient == 1, ])
summary(df[df$patient == 2, ])
summary(df[df$patient == 3, ])
length(unique(df$time))
ggplot(df) + geom_smooth(aes(x=time, y=response, color=Version), se = F, method = 'loess') +
geom_point(aes(x=time, y=response, color=Version), alpha=0.5, size=1.2) +
theme_classic() + theme(axis.text = element_text(color='black')) +
scale_color_manual(values=colpal)
setwd("~/Study/thesis/Bayesian/sfpca/simulation_microbiome/code_2D/sim_Babies_1D_2G/N25_C20")
library(parallel)
library(rstan)
library(loo)
library(Matrix)
options(mc.cores = parallel::detectCores())
source('../../../../sfpca.R')
#### test on simulated code
load("sim_N100_Orth.RData", dat <- new.env())
#ls.str(dat)
## true values of parameters
J = 2
N = length(dat$Y_SPARSE[[1]])
nknots = dat$params[[1]][[J]]
Q = nknots + 4 # number of basis
K = dat$params[[2]][[J]] # number of PC
sigma_eps = sqrt(dat$params[[5]][[J]]) # SIGMA_OMEGA_true is error variance
Q1 = dat$params[[1]][[1]] + 4
K1 = dat$params[[2]][[1]]
Theta = dat$params[[6]][(1+Q1):(Q+Q1), (1+K1):(K+K1)] # THETA_true
theta_mu = dat$params[[7]][(1+Q1):(Q+Q1)] # MU_true
ALPHA = t(dat$ALPHA[[1]][(1+K1):(K+K1), ]) # ALPHA
Group = ifelse(ALPHA[, 1] > -0.1, 'G1', 'G2') # 49 in G1 and 51 in G2
# basis
phi_t = dat$phi_t[[J]]
phi_t_stacked=NULL
for(i in 1:N){
phi_t_stacked = rbind(phi_t_stacked, t(phi_t[[i]]))
}
## simulated data
time = Y = MU = F = Omega = Alpha = list()
ids=rep(1:N,each=1)
for (i in 1:N){
time[[i]] = dat$TIME_SPARSE[[1]][[i]][[J]]
Y[[i]] = dat$Y_SPARSE[[1]][[i]][[J]]
MU[[i]] = dat$MU_SPARSE[[1]][[i]][[J]]
F[[i]] = dat$F_SPARSE[[1]][[i]][[J]]
Omega[[i]] = dat$OMEGA_SPARSE[[1]][[i]][[J]]
}
## convert data to data frame
nrows = length(unlist(time))
nvisits = sapply(time, length)
df = data.frame(matrix(rep(0, nrows * 3), nrow=nrows))
colnames(df) = c('id', 'time', 'response')
for (j in 1:nrows){
df$id = rep(1:N, nvisits)
df$time = unlist(time)
df$response = unlist(Y)
}
# add group assigment
id.list = unique(df$id)
df$group = rep(0, nrows)
for (i in 1:length(id.list)){
df$group[df$id == id.list[i]] = Group[i]
}
# compare to Knights method
library(splinectomeR)
result = permuspliner(data=df, xvar='time', yvar='response', cases='id',
category='group', perms = 999, retain_perm = T, quiet = T)
result$pval
#permuspliner.plot.permdistance(result, xlabel='time')
permuspliner.plot.permsplines(result, xvar = 'time', yvar = 'response')
ggsave('SplineR_GroupDiff.pdf')
